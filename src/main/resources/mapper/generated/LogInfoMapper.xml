<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yanda.mapper.generated.LogInfoMapper">
  <resultMap id="BasePropertyResultMap" type="com.yanda.entity.generated.LogInfo">
    <!--
      WARNING - @mbg.generated
    -->
    <result column="error" jdbcType="LONGVARCHAR" property="error" />
  </resultMap>
  <resultMap id="BaseResultMap" type="com.yanda.entity.generated.LogInfo">
    <!--
      WARNING - @mbg.generated
    -->
    <constructor>
      <idArg column="log_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="request_url" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="method" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="ip" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="class_method" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="params" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="create_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="message" javaType="java.lang.String" jdbcType="VARCHAR" />
    </constructor>
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.yanda.entity.generated.LogInfo">
    <!--
      WARNING - @mbg.generated
    -->
    <constructor>
      <idArg column="log_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="request_url" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="method" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="ip" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="class_method" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="params" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="create_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="message" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="error" javaType="java.lang.String" jdbcType="LONGVARCHAR" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
    -->
    log_id, request_url, method, ip, class_method, params, create_time, message
  </sql>
  <sql id="Blob_Column_List">
    <!--
      WARNING - @mbg.generated
    -->
    error
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.yanda.entity.generated.LogInfoExample" resultMap="ResultMapWithBLOBs">
    <!--
      WARNING - @mbg.generated
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from t_log_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.yanda.entity.generated.LogInfoExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_log_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExampleSelective" parameterType="map" resultMap="BasePropertyResultMap">
    <!--
      WARNING - @mbg.generated
    -->
    select
    <if test="example.distinct">
      distinct
    </if>
    <foreach collection="selective" item="column" separator=",">
      ${column.value}
    </foreach>
    from t_log_info
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.yanda.entity.generated.LogInfoExample">
    <!--
      WARNING - @mbg.generated
    -->
    delete from t_log_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <select id="countByExample" parameterType="com.yanda.entity.generated.LogInfoExample" resultType="java.lang.Long">
    <!--
      WARNING - @mbg.generated
    -->
    select count(*) from t_log_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
    -->
    update t_log_info
    <set>
      <if test="record.logId != null">
        log_id = #{record.logId,jdbcType=INTEGER},
      </if>
      <if test="record.requestUrl != null">
        request_url = #{record.requestUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.method != null">
        method = #{record.method,jdbcType=VARCHAR},
      </if>
      <if test="record.ip != null">
        ip = #{record.ip,jdbcType=VARCHAR},
      </if>
      <if test="record.classMethod != null">
        class_method = #{record.classMethod,jdbcType=VARCHAR},
      </if>
      <if test="record.params != null">
        params = #{record.params,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.message != null">
        message = #{record.message,jdbcType=VARCHAR},
      </if>
      <if test="record.error != null">
        error = #{record.error,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    <!--
      WARNING - @mbg.generated
    -->
    update t_log_info
    set log_id = #{record.logId,jdbcType=INTEGER},
      request_url = #{record.requestUrl,jdbcType=VARCHAR},
      method = #{record.method,jdbcType=VARCHAR},
      ip = #{record.ip,jdbcType=VARCHAR},
      class_method = #{record.classMethod,jdbcType=VARCHAR},
      params = #{record.params,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      message = #{record.message,jdbcType=VARCHAR},
      error = #{record.error,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbg.generated
    -->
    update t_log_info
    set log_id = #{record.logId,jdbcType=INTEGER},
      request_url = #{record.requestUrl,jdbcType=VARCHAR},
      method = #{record.method,jdbcType=VARCHAR},
      ip = #{record.ip,jdbcType=VARCHAR},
      class_method = #{record.classMethod,jdbcType=VARCHAR},
      params = #{record.params,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      message = #{record.message,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <select id="selectByPrimaryKeySelective" parameterType="map" resultMap="BasePropertyResultMap">
    <!--
      WARNING - @mbg.generated
    -->
    select
    <foreach collection="selective" item="column" separator=",">
      ${column.value}
    </foreach>
    from t_log_info
    where log_id = #{logId,jdbcType=INTEGER}
  </select>
  <insert id="upsert" parameterType="com.yanda.entity.generated.LogInfo">
    <!--
      WARNING - @mbg.generated
    -->
    insert into t_log_info
    (log_id, request_url, method, ip, class_method, params, create_time, message)
    values
    (#{logId,jdbcType=INTEGER}, #{requestUrl,jdbcType=VARCHAR}, #{method,jdbcType=VARCHAR}, 
      #{ip,jdbcType=VARCHAR}, #{classMethod,jdbcType=VARCHAR}, #{params,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{message,jdbcType=VARCHAR})
    on duplicate key update 
    log_id = #{logId,jdbcType=INTEGER}, 
    request_url = #{requestUrl,jdbcType=VARCHAR}, 
    method = #{method,jdbcType=VARCHAR}, 
    ip = #{ip,jdbcType=VARCHAR}, 
    class_method = #{classMethod,jdbcType=VARCHAR}, 
    params = #{params,jdbcType=VARCHAR}, 
    create_time = #{createTime,jdbcType=TIMESTAMP}, 
    message = #{message,jdbcType=VARCHAR}
  </insert>
  <insert id="upsertSelective" parameterType="com.yanda.entity.generated.LogInfo">
    <!--
      WARNING - @mbg.generated
    -->
    insert into t_log_info
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="logId != null">
        log_id,
      </if>
      <if test="requestUrl != null">
        request_url,
      </if>
      <if test="method != null">
        method,
      </if>
      <if test="ip != null">
        ip,
      </if>
      <if test="classMethod != null">
        class_method,
      </if>
      <if test="params != null">
        params,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="message != null">
        message,
      </if>
      <if test="error != null">
        error,
      </if>
    </trim>
    values
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="logId != null">
        #{logId,jdbcType=INTEGER},
      </if>
      <if test="requestUrl != null">
        #{requestUrl,jdbcType=VARCHAR},
      </if>
      <if test="method != null">
        #{method,jdbcType=VARCHAR},
      </if>
      <if test="ip != null">
        #{ip,jdbcType=VARCHAR},
      </if>
      <if test="classMethod != null">
        #{classMethod,jdbcType=VARCHAR},
      </if>
      <if test="params != null">
        #{params,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="message != null">
        #{message,jdbcType=VARCHAR},
      </if>
      <if test="error != null">
        #{error,jdbcType=LONGVARCHAR},
      </if>
    </trim>
    on duplicate key update 
    <trim suffixOverrides=",">
      <if test="logId != null">
        log_id = #{logId,jdbcType=INTEGER},
      </if>
      <if test="requestUrl != null">
        request_url = #{requestUrl,jdbcType=VARCHAR},
      </if>
      <if test="method != null">
        method = #{method,jdbcType=VARCHAR},
      </if>
      <if test="ip != null">
        ip = #{ip,jdbcType=VARCHAR},
      </if>
      <if test="classMethod != null">
        class_method = #{classMethod,jdbcType=VARCHAR},
      </if>
      <if test="params != null">
        params = #{params,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="message != null">
        message = #{message,jdbcType=VARCHAR},
      </if>
      <if test="error != null">
        error = #{error,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <insert id="upsertWithBLOBs" parameterType="com.yanda.entity.generated.LogInfo">
    <!--
      WARNING - @mbg.generated
    -->
    insert into t_log_info
    (log_id, request_url, method, ip, class_method, params, create_time, message, error
      )
    values
    (#{logId,jdbcType=INTEGER}, #{requestUrl,jdbcType=VARCHAR}, #{method,jdbcType=VARCHAR}, 
      #{ip,jdbcType=VARCHAR}, #{classMethod,jdbcType=VARCHAR}, #{params,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{message,jdbcType=VARCHAR}, #{error,jdbcType=LONGVARCHAR}
      )
    on duplicate key update 
    log_id = #{logId,jdbcType=INTEGER}, 
    request_url = #{requestUrl,jdbcType=VARCHAR}, 
    method = #{method,jdbcType=VARCHAR}, 
    ip = #{ip,jdbcType=VARCHAR}, 
    class_method = #{classMethod,jdbcType=VARCHAR}, 
    params = #{params,jdbcType=VARCHAR}, 
    create_time = #{createTime,jdbcType=TIMESTAMP}, 
    message = #{message,jdbcType=VARCHAR}, 
    error = #{error,jdbcType=LONGVARCHAR}
  </insert>
</mapper>